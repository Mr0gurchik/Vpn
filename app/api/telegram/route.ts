import { type NextRequest, NextResponse } from "next/server"
import TelegramBot from "node-telegram-bot-api"

// Initialize bot with token from environment variables
const token = process.env.TELEGRAM_BOT_TOKEN

export async function POST(request: NextRequest) {
  try {
    if (!token) {
      console.error("TELEGRAM_BOT_TOKEN not configured")
      return NextResponse.json({ error: "Telegram bot token not configured" }, { status: 500 })
    }

    const bot = new TelegramBot(token)
    const update = await request.json()

    // Handle incoming message
    if (update.message) {
      const chatId = update.message.chat.id
      const text = update.message.text || ""

      // Handle commands
      if (text.startsWith("/")) {
        const command = text.split(" ")[0].toLowerCase()

        switch (command) {
          case "/start":
            await bot.sendMessage(
              chatId,
              "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot! üöÄ\n\n–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.",
            )
            break

          case "/status":
            await bot.sendMessage(
              chatId,
              "‚úÖ –°—Ç–∞—Ç—É—Å VPN-—Å–µ—Ä–≤–∏—Å–∞: –û–Ω–ª–∞–π–Ω\n\n–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª—é–±–æ–º—É –∏–∑ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.",
            )
            break

          case "/servers":
            await bot.sendMessage(
              chatId,
              "üåé –î–æ—Å—Ç—É–ø–Ω—ã–µ VPN-—Å–µ—Ä–≤–µ—Ä—ã:\n\n" +
                "üá∫üá∏ –°–®–ê (–ù—å—é-–ô–æ—Ä–∫) - –∑–∞–≥—Ä—É–∑–∫–∞ 85%\n" +
                "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è (–§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç) - –∑–∞–≥—Ä—É–∑–∫–∞ 62%\n" +
                "üá∏üá¨ –°–∏–Ω–≥–∞–ø—É—Ä - –∑–∞–≥—Ä—É–∑–∫–∞ 45%\n" +
                "üáØüáµ –Ø–ø–æ–Ω–∏—è (–¢–æ–∫–∏–æ) - –∑–∞–≥—Ä—É–∑–∫–∞ 38%\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é.",
            )
            break

          case "/connect":
            await bot.sendMessage(
              chatId,
              "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:\n\n" +
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à–µ VPN-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n" +
                "2. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:\n" +
                "   - –ü—Ä–æ—Ç–æ–∫–æ–ª: OpenVPN\n" +
                "   - –°–µ—Ä–≤–µ—Ä: vpn.example.com\n" +
                "   - –ü–æ—Ä—Ç: 1194\n" +
                "   - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –í–∞—à –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π email\n" +
                "   - –ü–∞—Ä–æ–ª—å: –ü–∞—Ä–æ–ª—å –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏\n\n" +
                "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å –ø–æ–º–æ—â—å—é /help",
            )
            break

          case "/usage":
            await bot.sendMessage(
              chatId,
              "üìä –í–∞—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN:\n\n" +
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: 2.7 –ì–ë / 50 –ì–ë\n" +
                "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: 1/3\n" +
                "–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: –ê–∫—Ç–∏–≤–µ–Ω\n" +
                "–î–∞—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: 24 –∞–ø—Ä–µ–ª—è 2025",
            )
            break

          case "/help":
          default:
            await bot.sendMessage(
              chatId,
              "üîê –ö–æ–º–∞–Ω–¥—ã VPN-–±–æ—Ç–∞:\n\n" +
                "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                "/status - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ VPN-—Å–µ—Ä–≤–∏—Å–∞\n" +
                "/servers - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö VPN-—Å–µ—Ä–≤–µ—Ä–æ–≤\n" +
                "/connect - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é\n" +
                "/usage - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n" +
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏",
            )
            break
        }
      }
    }

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error("Error handling Telegram webhook:", error)
    return NextResponse.json({ error: "Failed to process Telegram update" }, { status: 500 })
  }
}

// Add a GET handler for testing
export async function GET() {
  return NextResponse.json({ status: "Telegram webhook endpoint is working" })
}

